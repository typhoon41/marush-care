trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  environment: 'Production'
  applicationVersion: 0.0
  dotNetVersion: 8.0.100
  assetsExists: false
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  NPM_PACKAGES: $(Build.SourcesDirectory)/.npm
  angularApplicationPath: '$(Build.SourcesDirectory)/Site/Gmf.Marush.Care.App'

name: $(applicationVersion).$(Rev:r)

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
    - job: 'Core'
      displayName: 'Core Job'
      steps:
      - task: UseDotNet@2
        displayName: 'Set .Net version'
        inputs:
          version: $(dotNetVersion)
      - task: DotNetCoreCLI@2
        displayName: 'Add Manifest for tool installation'
        inputs:
          command: 'custom'
          custom: 'new'
          arguments: tool-manifest
      - task: DotNetCoreCLI@2
        displayName: 'Install EF Tool'
        inputs:
          command: 'custom'
          custom: 'tool '
          arguments: install dotnet-ef
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'New-Item -ItemType directory -Path $(NPM_PACKAGES)'
      - task: Cache@2
        displayName: 'Cache NPM Dependencies'
        inputs:
          key: 'npm | "$(Agent.OS)" | "$(angularApplicationPath)/package-lock.json"'
          path: $(NPM_PACKAGES)
          cacheHitVar: 'NPM_CACHE_RESTORED'
      - task: Npm@1
        displayName: 'Install node modules'
        inputs:
          command: 'ci'
          workingDir: $(angularApplicationPath)
        condition: ne(variables.NPM_CACHE_RESTORED, true)  
      - task: Npm@1
        displayName: 'Execute Linting'
        inputs:
          command: 'custom'
          customCommand: 'run lint'
          workingDir: $(angularApplicationPath)   
      - task: Npm@1
        displayName: 'Building Angular Application'
        inputs:
          command: 'custom'
          customCommand: 'run build -- --configuration production'
          workingDir: $(angularApplicationPath)
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $assetsExists = Test-Path -Path "$(System.DefaultWorkingDirectory)/obj/project.assets.json"
      - task: Cache@2
        displayName: 'NuGet Cache'
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
          restoreKeys: |
              nuget | "$(Agent.OS)"
              nuget
          path: $(NUGET_PACKAGES)
          cacheHitVar: 'NUGET_CACHE_RESTORED'
      - script: |
          echo Restoring NuGet packages since packages weren't found in the cache...
          dotnet restore -r win-x64
        displayName: 'Restoring NuGet Packages'
        condition: and(succeeded(), or(ne(variables.assetsExists, true), ne(variables.NUGET_CACHE_RESTORED, true)))
      - script: |
          echo Building application version $(applicationVersion) $(Build.BuildNumber).
          dotnet build --no-incremental --no-self-contained --configuration $(buildConfiguration) --no-restore -p:Version=$(applicationVersion) -p:FileVersion=$(Build.BuildNumber) -p:MarushRuntime=win-x64
        displayName: '.Net Core Build'
      - task: DotNetCoreCLI@2
        displayName: 'Packing artifacts'
        inputs:
          command: 'publish'
          configuration: $(BuildConfiguration)
          nobuild: True 
          publishWebProjects: True
          arguments: -r win-x64 --no-self-contained --output $(Build.ArtifactStagingDirectory) -p:EnvironmentName=$(environment) -p:Version=$(applicationVersion) -p:FileVersion=$(Build.BuildNumber) -p:MarushRuntime=win-x64
          zipAfterPublish: True
      - task: PublishBuildArtifacts@1
        displayName: 'Publishing artifacts'
        inputs:
          ArtifactName: Marush
- stage: 'DeployToTest'
  displayName: 'Deploy to Test'
  dependsOn: 'Build'
  condition:  succeeded()
  jobs:
  - template: 'Deployment/Templates/environment-deploy.yaml'
    parameters:
      deploymentName: 'DeployToTest'
      environment: 'Test'
      destinationWebsiteName: MarushTest
