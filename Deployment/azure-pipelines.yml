trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  applicationVersion: 0.1
  dotNetVersion: 8.0.100
  angularApplicationPath: '$(Build.SourcesDirectory)/Site/Gmf.Marush.Care.App'

name: $(applicationVersion).$(Rev:r)

stages:
- stage: 'Build'
  displayName: 'Build'
  variables:
    environment: 'Production'
  jobs:
    - job: 'Core'
      displayName: 'Core Job'
      steps:
      - task: UseDotNet@2
        displayName: 'Set .Net version'
        inputs:
          version: $(dotNetVersion)
      - task: DotNetCoreCLI@2
        displayName: 'Add Manifest for tool installation'
        inputs:
          command: 'custom'
          custom: 'new'
          arguments: tool-manifest
      - task: DotNetCoreCLI@2
        displayName: 'Install EF Tool'
        inputs:
          command: 'custom'
          custom: 'tool '
          arguments: install dotnet-ef
      - task: Npm@1
        displayName: 'Install node modules'
        inputs:
          command: 'ci'
          workingDir: $(angularApplicationPath)
      - task: Npm@1
        displayName: 'Execute Linting'
        inputs:
          command: 'custom'
          customCommand: 'run lint'
          workingDir: $(angularApplicationPath)   
      - task: Npm@1
        displayName: 'Building Angular Application'
        inputs:
          command: 'custom'
          customCommand: 'run build --configuration=production'
          workingDir: $(angularApplicationPath)
      - script: |
          dotnet restore -r win-x64
        displayName: 'Restoring NuGet Packages'
      - script: |
          echo Building application version $(applicationVersion) $(Build.BuildNumber).
          dotnet build --no-incremental --no-self-contained --configuration $(buildConfiguration) --no-restore -p:Version=$(applicationVersion) -p:FileVersion=$(Build.BuildNumber) -p:MarushRuntime=win-x64
        displayName: '.Net Core Build'
      - task: DotNetCoreCLI@2
        displayName: 'Packing artifacts'
        inputs:
          command: 'publish'
          configuration: $(BuildConfiguration)
          nobuild: True 
          publishWebProjects: True
          arguments: -r win-x64 --no-self-contained --output $(Build.ArtifactStagingDirectory) -p:EnvironmentName=$(environment) -p:Version=$(applicationVersion) -p:FileVersion=$(Build.BuildNumber) -p:MarushRuntime=win-x64
          zipAfterPublish: True
      - task: PublishBuildArtifacts@1
        displayName: 'Publishing artifacts'
        inputs:
          ArtifactName: Marush

- stage: 'DeployToTest'
  displayName: 'Deploy to Test'
  dependsOn: 'Build'
  condition:  succeeded()
  jobs:
  - template: 'Deployment/Templates/environment-deploy.yaml'
    parameters:
      environment: 'Test'
      deploymentName: 'DeployToTest'
      destinationWebsiteName: MarushTest

- stage: 'DeployToProduction'
  displayName: 'Deploy to Production'
  dependsOn: 'DeployToTest'
  condition:  succeeded()
  jobs:
  - job: WaitForValidation
    displayName: Wait for approval
    pool: server
    timeoutInMinutes: 21600 # job times out in 15 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 21600 # job times out in 15 days
      inputs:
        notifyUsers: |
          nizzotyphoon41@hotmail.com
        instructions: 'Please approve production deploy so it could be executed'
        onTimeout: reject
  - template: 'Deployment/Templates/environment-deploy.yaml'
    parameters:
      environment: 'Production'
      deploymentName: 'DeployToProduction'
      approvalJobName: 'WaitForValidation'
      destinationWebsiteName: Marush
