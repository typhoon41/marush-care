parameters:
- name: applicationVersion
- name: angularApplicationPath
- name: apiApplicationPath
- name: migrationsAssemblyPath
- name: dbContextName
  default: 'MarushCareContext'
- name: artifactName
  default: 'Marush'

jobs:
 - job: 'Build'
   variables:
      BuildParameters: -p:Version=${{ parameters.applicationVersion }} -p:FileVersion=$(Build.BuildNumber) -p:MarushRuntime=win-x64 --no-self-contained
      MigrationsArtifact: ${{ parameters.artifactName }}-migrations-$(Build.BuildNumber)
      FullAppPath: Site/${{ parameters.apiApplicationPath }}
      DotNetVersion: 9.0.x
      NodeVersion: 22.20.0
   displayName: 'Build'
   steps:
      - task: UseDotNet@2
        displayName: 'Set .Net version'
        inputs:
          version: $(DotNetVersion)
          
      - task: UseNode@1
        displayName: 'Set Node version'
        inputs:
          version: $(NodeVersion)
          
      - task: Npm@1
        displayName: 'Install node modules'
        inputs:
          command: 'ci'
          workingDir: ${{ parameters.angularApplicationPath }}

      - task: PowerShell@2
        displayName: 'Set .net major version'
        inputs:
          targetType: 'inline'
          script: |
            $majorVersion = "$(DotNetVersion)" -split "\." | Select-Object -First 1
            Write-Host "##vso[task.setvariable variable=dotNetMajorVersion]$majorVersion"

      - task: Npm@1
        displayName: 'Execute Linting'
        inputs:
          command: 'custom'
          customCommand: 'run lint'
          workingDir: ${{ parameters.angularApplicationPath }}

      - task: Npm@1
        displayName: 'Building Angular Application'
        inputs:
          command: 'custom'
          customCommand: 'run build --configuration=production'
          workingDir: ${{ parameters.angularApplicationPath }}

      - task: DotNetCoreCLI@2
        displayName: 'Add Manifest for tool installation'
        inputs:
          command: 'custom'
          custom: 'new'
          arguments: tool-manifest --force

      - task: DotNetCoreCLI@2
        displayName: 'Install EF Tool'
        inputs:
          command: 'custom'
          custom: 'tool '
          arguments: install dotnet-ef

      - task: DotNetCoreCLI@2
        displayName: 'Install workload for Aspire'
        inputs:
          command: 'custom'
          custom: 'workload'
          arguments: 'install aspire'

      - task: DotNetCoreCLI@2
        displayName: 'Restoring NuGet Packages'
        inputs:
          command: 'restore'
          restoreArguments : '-r win-x64'

      - task: DotNetCoreCLI@2
        displayName: '.Net Core Build'
        inputs:
          command: 'custom'
          custom: 'build'
          arguments: --no-incremental --configuration Release --no-restore $(BuildParameters)

      - task: PowerShell@2
        displayName: 'Copy app_offline'
        inputs:
          targetType: inline
          script: Copy-Item -Path "$(Build.SourcesDirectory)/$(FullAppPath)/Properties/app_offline_template.htm" -Destination "$(Build.SourcesDirectory)/$(FullAppPath)/bin/Release/net$(dotNetMajorVersion).0/win-x64/app_offline.htm"

      - task: DotNetCoreCLI@2
        displayName: 'Packing artifacts'
        inputs:
          command: 'publish'
          configuration: Release
          nobuild: True 
          publishWebProjects: True
          arguments: -r win-x64 --output $(Build.ArtifactStagingDirectory) -p:EnvironmentName=_-_-environment-_-_ $(BuildParameters)
          zipAfterPublish: True

      - task: PublishBuildArtifacts@1
        displayName: 'Publishing artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: ${{ parameters.artifactName }}-$(Build.BuildNumber)
          publishLocation: 'Container'

      - task: DotNetCoreCLI@2
        displayName: Create Entity Framework's Bundle for SQL
        inputs:
          command: 'custom'
          workingDirectory: $(FullAppPath)
          custom: 'ef '
          arguments: migrations bundle --output $(Build.ArtifactStagingDirectory)/Migrations/${{ parameters.dbContextName }}-efbundle.exe --project ${{ parameters.migrationsAssemblyPath }} --startup-project ./${{ parameters.apiApplicationPath }}.csproj --context ${{ parameters.dbContextName }} --configuration Release --runtime win-x64 --force --verbose

      - task: PublishBuildArtifacts@1
        displayName: 'Publishing migration artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\Migrations'
          ArtifactName: $(MigrationsArtifact)
          publishLocation: 'Container'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish SQL artifacts - appsettings.json'
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/$(FullAppPath)/appsettings.json
          ArtifactName: $(MigrationsArtifact)
          publishLocation: 'Container'

      - task: CmdLine@2
        displayName: 'Reset local changes'
        inputs:
          script: 'git reset --hard'